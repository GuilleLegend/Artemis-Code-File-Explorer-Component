{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/lib/shared/types.ts"],"names":[],"mappings":"AAoCA,MAAM,CAAN,IAAY,aAGX;AAHD,WAAY,aAAa;IACrB,8BAAa,CAAA;IACb,8BAAa,CAAA;AACjB,CAAC,EAHW,aAAa,KAAb,aAAa,QAGxB","sourcesContent":["import { Observable } from 'rxjs';\r\n\r\nexport type NodeContent<T> = { leafs: T[], nodes: T[] };\r\n\r\nexport interface Dictionary<T> {\r\n    [Key: string]: T;\r\n}\r\n\r\nexport interface INode {\r\n    id: number;\r\n    parentId: number;\r\n    data: any;\r\n    isLeaf: boolean;\r\n    children: INode[];\r\n}\r\n\r\nexport interface IDataService<T> {\r\n    getNodeChildren(node: T): Observable<NodeContent<T>>;\r\n    createNode(parentNode: T, name: string): Observable<any>;\r\n    renameNode(node: T, newName: string): Observable<any>;\r\n    renameLeaf(node: T, newName: string): Observable<any>;\r\n    deleteNodes(nodes: T[]): Observable<any>;\r\n    deleteLeafs(nodes: T[]): Observable<any>;\r\n    uploadFiles(node: T, files: File[]): Observable<any>;\r\n    download(node: T): Observable<any>;\r\n    open(node: T): Observable<any>;\r\n    share(node: T): Observable<any>;\r\n    rightClick(node: T): Observable<any>;\r\n    leftClick(node: T): Observable<any>;\r\n    emptyClick(): Observable<any>;\r\n}\r\n\r\nexport interface IHelperService {\r\n    getName<T>(data: T): string;\r\n}\r\n\r\nexport enum AvialableView {\r\n    List = 'List',\r\n    Icon = 'Icon',\r\n}\r\n\r\nexport interface NgeExplorerConfig {\r\n    homeNodeName: string;\r\n}\r\n"]}