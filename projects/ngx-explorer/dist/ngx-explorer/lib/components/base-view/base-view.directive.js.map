{"version":3,"file":"base-view.directive.js","sourceRoot":"","sources":["../../../../../src/lib/components/base-view/base-view.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, Inject, OnDestroy } from '@angular/core';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { INode } from '../../shared/types';\r\nimport { FILTER_STRING } from '../../injection-tokens/tokens';\r\nimport { ExplorerService } from '../../services/explorer.service';\r\nimport { HelperService } from '../../services/helper.service';\r\n\r\n@Directive()\r\nexport class BaseView implements OnDestroy {\r\n    public selection: INode[] = [];\r\n    public items: INode[] = [];\r\n    public dragging = false;\r\n    protected subs = new Subscription();\r\n\r\n    constructor(protected explorerService: ExplorerService, protected helperService: HelperService, @Inject(FILTER_STRING) private filter: BehaviorSubject<string>) {\r\n        this.subs.add(this.explorerService.openedNode.subscribe(nodes => {\r\n            this.items = nodes ? nodes.children : [];\r\n        }));\r\n\r\n        this.subs.add(this.explorerService.selectedNodes.subscribe(nodes => {\r\n            this.selection = nodes ? nodes : [];\r\n        }));\r\n    }\r\n\r\n    get filteredItems(): INode[] {\r\n        const filter = this.filter.value;\r\n        if (!filter) {\r\n            return this.items;\r\n        }\r\n        return this.items.filter(i => this.helperService.getName(i.data).toLowerCase().includes(filter.toLowerCase()));\r\n    }\r\n\r\n    getDisplayName(data) {\r\n        return this.helperService.getName(data);\r\n    }\r\n\r\n    getFileType(data: any): string {\r\n        return this.helperService.getFileType(data);\r\n    }\r\n\r\n    getLastModified(data: any): string {\r\n        return this.helperService.getLastModified(data);\r\n    }\r\n\r\n    getSize(data: any): string {\r\n        return this.helperService.getSize(data);\r\n    }\r\n\r\n    select(event: MouseEvent, item: INode) {\r\n        const selectedIndex = this.selection.findIndex(i => i === item);\r\n        const alreadySelected = selectedIndex !== -1;\r\n        const metaKeyPressed = event.metaKey || event.ctrlKey || event.shiftKey;\r\n\r\n        if (alreadySelected && metaKeyPressed) {\r\n            this.selection.splice(selectedIndex, 1);\r\n        } else {\r\n            if (!metaKeyPressed) {\r\n                this.selection.length = 0;\r\n            }\r\n            this.selection.push(item);\r\n        }\r\n        this.explorerService.selectNodes(this.selection);\r\n    }\r\n\r\n    open(event: MouseEvent, item: INode) {\r\n        const metaKeyPressed = event.metaKey || event.ctrlKey || event.shiftKey;\r\n        if (!metaKeyPressed) {\r\n            this.explorerService.openNode(item.id);\r\n            this.explorerService.getCurrentPath();\r\n        }\r\n    }\r\n\r\n    dbClick(item: INode) {\r\n        this.explorerService.dbClick(item);\r\n    }\r\n\r\n    dbSelect(item: INode) {\r\n        this.explorerService.dbSelect(item);\r\n    }\r\n\r\n    emptyClick() {\r\n        this.explorerService.emptyClick();\r\n        this.explorerService.getCurrentPath();\r\n    }\r\n\r\n    openLeaf(event: MouseEvent, item: INode) {\r\n        const metaKeyPressed = event.metaKey || event.ctrlKey || event.shiftKey;\r\n        if (!metaKeyPressed) {\r\n            this.explorerService.openLeaf(item);\r\n        }\r\n    }\r\n\r\n    isSelected(item: INode) {\r\n        return this.selection.indexOf(item) !== -1;\r\n    }\r\n\r\n    emptySpaceClick(): void {\r\n        this.explorerService.selectNodes([]);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subs.unsubscribe();\r\n    }\r\n\r\n}\r\n"]}