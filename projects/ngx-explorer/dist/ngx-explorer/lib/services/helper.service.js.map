{"version":3,"file":"helper.service.js","sourceRoot":"","sources":["../../../../src/lib/services/helper.service.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAM3C,IAAa,aAAa,GAA1B,MAAa,aAAa;IAEtB,OAAO,CAAC,IAAS;QACb,OAAO,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,CAAC;IACtB,CAAC;IAED,WAAW,CAAC,IAAS;QACjB,OAAO,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,CAAC;IAC1B,CAAC;IAED,eAAe,CAAC,IAAS;QACrB,OAAO,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,YAAY,CAAC;IAC9B,CAAC;IAED,OAAO,CAAC,IAAS;QACb,IAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,MAAK,SAAS,EAAC;YACxB,OAAO,GAAG,CAAC;SACd;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,UAAU,CAAC,IAAY;QACnB,MAAM,IAAI,GAAG,CAAC,CAAC;QACf,MAAM,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC;QAC7B,MAAM,QAAQ,GAAG,IAAI,GAAG,QAAQ,CAAC;QACjC,MAAM,QAAQ,GAAG,IAAI,GAAG,QAAQ,CAAC;QACjC,MAAM,QAAQ,GAAG,IAAI,GAAG,QAAQ,CAAC;QAEjC,IAAI,IAAI,GAAG,QAAQ,EAAE;YACjB,OAAO,IAAI,GAAG,QAAQ,CAAC;SAC1B;aAAM,IAAI,IAAI,GAAG,QAAQ,EAAE;YACxB,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;SAC/C;aAAM,IAAI,IAAI,GAAG,QAAQ,EAAE;YACxB,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;SAC/C;aAAM,IAAI,IAAI,GAAG,QAAQ,EAAE;YACxB,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;SAC/C;aAAM;YACH,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;SAC/C;IACL,CAAC;CACJ,CAAA;AAxCY,aAAa;IAHzB,UAAU,CAAC;QACR,UAAU,EAAE,MAAM;KACrB,CAAC;GACW,aAAa,CAwCzB;SAxCY,aAAa","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { IHelperService } from '../shared/types';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class HelperService implements IHelperService {\r\n\r\n    getName(data: any): string {\r\n        return data?.name;\r\n    }\r\n\r\n    getFileType(data: any): string {\r\n        return data?.fileType;\r\n    }\r\n\r\n    getLastModified(data: any): string {        \r\n        return data?.lastModified;\r\n    }\r\n\r\n    getSize(data: any): string {\r\n        if(data?.size === undefined){\r\n            return '0';\r\n        }\r\n        return this.formatSize(data?.size);\r\n    }\r\n\r\n    formatSize(size: number): string {\r\n        const byte = 1;\r\n        const kilobyte = 1024 * byte;\r\n        const megabyte = 1024 * kilobyte;\r\n        const gigabyte = 1024 * megabyte;\r\n        const terabyte = 1024 * gigabyte;\r\n\r\n        if (size < kilobyte) {\r\n            return size + ' bytes';\r\n        } else if (size < megabyte) {\r\n            return (size / kilobyte).toFixed(2) + ' KB';\r\n        } else if (size < gigabyte) {\r\n            return (size / megabyte).toFixed(2) + ' MB';\r\n        } else if (size < terabyte) {\r\n            return (size / gigabyte).toFixed(2) + ' GB';\r\n        } else {\r\n            return (size / terabyte).toFixed(2) + ' TB';\r\n        }\r\n    }\r\n}\r\n"]}