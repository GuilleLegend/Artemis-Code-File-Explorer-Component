{"version":3,"file":"explorer.service.js","sourceRoot":"","sources":["../../../../src/lib/services/explorer.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, forkJoin, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { INode, Dictionary, NodeContent } from '../shared/types';\r\nimport { Utils } from '../shared/utils';\r\nimport { DataService } from './data.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ExplorerService {\r\n    private internalTree = Utils.createNode();\r\n    private flatPointers: Dictionary<INode> = { [this.internalTree.id]: this.internalTree };\r\n\r\n    private readonly selectedNodes$ = new BehaviorSubject<INode[]>([]);\r\n    private readonly openedNode$ = new BehaviorSubject<INode>(undefined);\r\n    private readonly breadcrumbs$ = new BehaviorSubject<INode[]>([]);\r\n    private readonly tree$ = new BehaviorSubject<INode>(this.internalTree);\r\n\r\n    public readonly selectedNodes = this.selectedNodes$.asObservable();\r\n    public readonly openedNode = this.openedNode$.asObservable();\r\n    public readonly breadcrumbs = this.breadcrumbs$.asObservable();\r\n    public readonly tree = this.tree$.asObservable();\r\n\r\n    constructor(private dataService: DataService) {\r\n        this.openNode(this.internalTree.id);\r\n    }\r\n\r\n    public selectNodes(nodes: INode[]) {\r\n        this.selectedNodes$.next(nodes);\r\n    }\r\n\r\n    public openNode(id: number) {\r\n        this.getNodeChildren(id).subscribe(() => {\r\n            const parent = this.flatPointers[id];\r\n            this.openedNode$.next(parent);\r\n            const breadcrumbs = Utils.buildBreadcrumbs(this.flatPointers, parent);\r\n            this.breadcrumbs$.next(breadcrumbs);\r\n            this.selectedNodes$.next([]);\r\n        });\r\n    }\r\n\r\n    public dbClick(target: INode){\r\n        this.dataService.rightClick(target);\r\n    }\r\n\r\n    public dbSelect(target: INode){\r\n        this.dataService.leftClick(target);\r\n    }\r\n\r\n    public emptyClick(){\r\n        this.dataService.emptyClick();\r\n    }\r\n\r\n    public openLeaf(target: INode) {\r\n        this.dataService.open(target.data).subscribe(() => {\r\n            this.refresh();\r\n        })\r\n    }\r\n\r\n    public expandNode(id: number) {\r\n        this.getNodeChildren(id).subscribe();\r\n    }\r\n\r\n    public createNode(name: string) {\r\n        const parent = this.openedNode$.value;\r\n        this.dataService.createNode(parent.data, name).subscribe(() => {\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    public refresh() {\r\n        this.openNode(this.openedNode$.value.id);\r\n    }\r\n\r\n    public rename(name: string) {\r\n        const nodes = this.selectedNodes$.value;\r\n        if (nodes.length > 1) {\r\n            throw new Error('Multiple selection rename not supported');\r\n        }\r\n        if (nodes.length === 0) {\r\n            throw new Error('Nothing selected to rename');\r\n        }\r\n\r\n        const node = nodes[0];\r\n        if (node.isLeaf) {\r\n            this.dataService.renameLeaf(node.data, name).subscribe(() => {\r\n                this.refresh();\r\n            });\r\n        } else {\r\n            this.dataService.renameNode(node.data, name).subscribe(() => {\r\n                this.refresh();\r\n            });\r\n        }\r\n    }\r\n\r\n    public remove() {\r\n        const selection = this.selectedNodes$.value;\r\n        if (selection.length === 0) {\r\n            throw new Error('Nothing selected to remove');\r\n        }\r\n\r\n        const targets = selection.map(node => this.flatPointers[node.id]);\r\n        const nodes = targets.filter(t => !t.isLeaf).map(data => data.data);\r\n        const leafs = targets.filter(t => t.isLeaf).map(data => data.data);\r\n\r\n        const sub1 = nodes.length ? this.dataService.deleteNodes(nodes) : of([]);\r\n        const sub2 = leafs.length ? this.dataService.deleteLeafs(leafs) : of([]);\r\n\r\n        forkJoin([sub1, sub2]).subscribe(() => {\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    public upload(files: File[]) {\r\n        const node = this.openedNode$.value;\r\n        this.dataService.uploadFiles(node.data, files).subscribe(() => {\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    public download() {\r\n        const target = this.selectedNodes$.value[0];\r\n        this.dataService.download(target.data).subscribe(() => {\r\n            this.refresh();\r\n        });\r\n    }\r\n\r\n    public open() {\r\n        const target = this.selectedNodes$.value[0];\r\n        this.dataService.open(target.data).subscribe(() => {\r\n            this.refresh();\r\n        })\r\n    }    \r\n\r\n    public share() {\r\n        const target = this.selectedNodes$.value[0];\r\n        this.dataService.share(target.data).subscribe(() => {\r\n            this.refresh();\r\n        })\r\n    }\r\n\r\n    private getNodeChildren(id: number) {\r\n        const parent = this.flatPointers[id];\r\n        if (parent.isLeaf) {\r\n            throw new Error('Cannot open leaf node');\r\n        }\r\n\r\n        return this.dataService\r\n            .getNodeChildren(parent.data)\r\n            .pipe(tap(({ leafs, nodes }: NodeContent<any>) => {\r\n                const newNodes = nodes.map(data => Utils.createNode(id, false, data));\r\n                const newLeafs = leafs.map(data => Utils.createNode(id, true, data));\r\n                const newChildren = newNodes.concat(newLeafs);\r\n                const added = newChildren.filter(c => !parent.children.find(o => Utils.compareObjects(o.data, c.data)));\r\n                const removed = parent.children.filter(o => !newChildren.find(c => Utils.compareObjects(o.data, c.data)));\r\n\r\n                removed.forEach(c => {\r\n                    const index = parent.children.findIndex(o => o.id === c.id);\r\n                    parent.children.splice(index, 1);\r\n                    delete this.flatPointers[c.id];\r\n                });\r\n\r\n                added.forEach(c => {\r\n                    parent.children.push(c);\r\n                    this.flatPointers[c.id] = c;\r\n                });\r\n\r\n                parent.children.sort((a, b) => a.data.name.localeCompare(b.data.name));\r\n                const nodeChildren = parent.children.filter(c => !c.isLeaf);\r\n                const leafChildren = parent.children.filter(c => c.isLeaf);\r\n                parent.children = nodeChildren.concat(leafChildren);\r\n\r\n                this.tree$.next(this.internalTree);\r\n            }));\r\n    }\r\n\r\n}\r\n"]}